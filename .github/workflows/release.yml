name: Release

on:
  push:
    tags:
      - v*.*.*
    branches:
      - release/**

jobs:
  release:
    name: ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
      id-token: "write"

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            runner: ubuntu-latest
          - os: ubuntu-latest
            arch: arm64
            runner: ubuntu-24.04-arm64
          - os: windows-latest
            arch: x64
            runner: windows-latest
          # - os: windows-latest
          #   arch: arm64
          #   runner: windows-11-arm
          - os: macos-latest
            arch: x64
            runner: macos-latest
          - os: macos-latest
            arch: arm64
            runner: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          # A fine-grained GitHub personal access token is required to checkout submodules
          # https://github.com/actions/checkout/issues/287
          # Permissions required:
          # - Repository access to quests-org/quests & quests-org/registry
          # - Read access to "Contents" and "Metadata"
          # - Read/Write access to actions and workflows
          token: ${{ secrets.CHECKOUT_ACCESS_TOKEN }}
      - uses: ./.github/actions/setup-ripgrep-cache
      - uses: ./.github/actions/prepare
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - if: matrix.os == 'ubuntu-latest'
        name: Build Linux
        run: pnpm turbo build:linux:${{ matrix.arch }} --env-mode=loose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUILDER_PUBLISH_S3_ENDPOINT: ${{ vars.BUILDER_PUBLISH_S3_ENDPOINT }}
          MAIN_VITE_GOOGLE_CLIENT_ID: ${{ vars.MAIN_VITE_GOOGLE_CLIENT_ID }}
          MAIN_VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.MAIN_VITE_GOOGLE_CLIENT_SECRET }}
          VITE_APP_PROTOCOL: ${{ vars.VITE_APP_PROTOCOL }}
          VITE_POSTHOG_API_HOST: ${{ vars.VITE_POSTHOG_API_HOST }}
          VITE_POSTHOG_API_KEY: ${{ vars.VITE_POSTHOG_API_KEY }}
          VITE_QUESTS_API_BASE_URL: ${{ vars.VITE_QUESTS_API_BASE_URL }}

      - if: matrix.os == 'ubuntu-latest'
        name: Upload Linux .AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage-${{ matrix.arch }}
          path: apps/studio/dist/*.AppImage
          retention-days: 30

      - if: matrix.os == 'ubuntu-latest'
        name: Upload Linux .deb
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb-${{ matrix.arch }}
          path: apps/studio/dist/*.deb
          retention-days: 30

      - if: matrix.os == 'ubuntu-latest'
        name: Upload Linux .tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: linux-tar-gz-${{ matrix.arch }}
          path: apps/studio/dist/*.tar.gz
          retention-days: 30

      - if: matrix.os == 'ubuntu-latest'
        name: Upload Linux .yml
        uses: actions/upload-artifact@v4
        with:
          name: latest-linux-${{ matrix.arch }}.yml
          path: apps/studio/dist/latest-linux.yml
          retention-days: 30

      - if: matrix.os == 'ubuntu-latest'
        name: Upload Linux blockmap
        uses: actions/upload-artifact@v4
        with:
          name: linux-blockmap-${{ matrix.arch }}
          path: apps/studio/dist/*.blockmap
          retention-days: 30

      - if: matrix.os == 'macos-latest'
        name: setup-signing
        run: |
          mkdir -p ~/.private_keys
          echo '${{ secrets.APPLE_API_KEY_DATA }}' > ~/.private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - if: matrix.os == 'macos-latest'
        name: Build Mac
        run: pnpm turbo build:mac:${{ matrix.arch }} --env-mode=loose
        env:
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY: ~/.private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          APPLE_NOTARIZATION_ENABLED: ${{ vars.APPLE_NOTARIZATION_ENABLED }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUILDER_PUBLISH_S3_ENDPOINT: ${{ vars.BUILDER_PUBLISH_S3_ENDPOINT }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          MAIN_VITE_GOOGLE_CLIENT_ID: ${{ vars.MAIN_VITE_GOOGLE_CLIENT_ID }}
          MAIN_VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.MAIN_VITE_GOOGLE_CLIENT_SECRET }}
          VITE_APP_PROTOCOL: ${{ vars.VITE_APP_PROTOCOL }}
          VITE_POSTHOG_API_HOST: ${{ vars.VITE_POSTHOG_API_HOST }}
          VITE_POSTHOG_API_KEY: ${{ vars.VITE_POSTHOG_API_KEY }}
          VITE_QUESTS_API_BASE_URL: ${{ vars.VITE_QUESTS_API_BASE_URL }}

      - if: matrix.os == 'macos-latest'
        name: Cleanup Signing
        run: |
          rm ~/.private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - if: matrix.os == 'macos-latest'
        name: Upload Macos .dmg
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-${{ matrix.arch }}
          path: apps/studio/dist/*.dmg
          retention-days: 30

      - if: matrix.os == 'macos-latest'
        name: Upload Macos .zip
        uses: actions/upload-artifact@v4
        with:
          name: macos-zip-${{ matrix.arch }}
          path: apps/studio/dist/*.zip
          retention-days: 30

      - if: matrix.os == 'macos-latest'
        name: Upload Macos .yml
        uses: actions/upload-artifact@v4
        with:
          name: macos-yml-${{ matrix.arch }}
          path: apps/studio/dist/*.yml
          retention-days: 30

      - if: matrix.os == 'macos-latest'
        name: Upload Macos Blockmap
        uses: actions/upload-artifact@v4
        with:
          name: macos-blockmap-${{ matrix.arch }}
          path: apps/studio/dist/*.blockmap
          retention-days: 30

      - if: matrix.os == 'windows-latest'
        uses: KamaranL/add-signtool-action@v1
        id: signtool

      - if: matrix.os == 'windows-latest'
        id: auth-google-cloud
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          create_credentials_file: true

      - if: matrix.os == 'windows-latest'
        name: Install GCP KMS CNG Provider
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = 'cng-v1.2'
          $zipUrl  = "https://github.com/GoogleCloudPlatform/kms-integrations/releases/download/$version/kmscng-1.2-windows-amd64.zip"
          $zipPath = Join-Path $env:RUNNER_TEMP "kmscng-$version.zip"
          $outDir  = Join-Path $env:RUNNER_TEMP "kmscng-$version"

          Invoke-WebRequest $zipUrl -OutFile $zipPath
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          Expand-Archive -Path $zipPath -DestinationPath $outDir -Force

          $msi = Get-ChildItem -Path $outDir -Recurse -Filter "kmscng.msi" | Select-Object -First 1
          if (-not $msi) { throw "kmscng.msi not found in archive." }

          Start-Process msiexec.exe -Wait -ArgumentList "/i `"$($msi.FullName)`" /qn"

          # quick sanity check: CNG provider is registered
          certutil -csp "Google Cloud KMS Provider" -csptest

      - if: matrix.os == 'windows-latest'
        name: Write EV Cert Chain File
        shell: pwsh
        run: |
          Set-Content -Path "${{ env.WIN_CERT_PATH }}" -Value '${{ env.WIN_EV_CERT_PEM }}' -Encoding ascii
        env:
          WIN_CERT_PATH: ${{ runner.temp }}\ev-chain.pem
          WIN_EV_CERT_PEM: ${{ secrets.WIN_EV_CERT_PEM }}

      - if: matrix.os == 'windows-latest'
        name: Build Windows
        run: pnpm turbo build:windows:${{ matrix.arch }} --env-mode=loose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUILDER_PUBLISH_S3_ENDPOINT: ${{ vars.BUILDER_PUBLISH_S3_ENDPOINT }}
          WIN_GCP_KMS_KEY_VERSION: ${{ secrets.WIN_GCP_KMS_KEY_VERSION }}
          WIN_CERT_PATH: ${{ runner.temp }}\ev-chain.pem
          MAIN_VITE_GOOGLE_CLIENT_ID: ${{ vars.MAIN_VITE_GOOGLE_CLIENT_ID }}
          MAIN_VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.MAIN_VITE_GOOGLE_CLIENT_SECRET }}
          VITE_APP_PROTOCOL: ${{ vars.VITE_APP_PROTOCOL }}
          VITE_POSTHOG_API_HOST: ${{ vars.VITE_POSTHOG_API_HOST }}
          VITE_POSTHOG_API_KEY: ${{ vars.VITE_POSTHOG_API_KEY }}
          VITE_QUESTS_API_BASE_URL: ${{ vars.VITE_QUESTS_API_BASE_URL }}

      - if: matrix.os == 'windows-latest'
        name: Verify Signatures
        shell: pwsh
        run: |
          & "${{ env.SIGNTOOL_PATH }}" verify /pa /all "apps\studio\dist\*.exe"
        env:
          SIGNTOOL_PATH: signtool.exe

      - if: matrix.os == 'windows-latest'
        name: Upload Windows .exe
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe-${{ matrix.arch }}
          path: apps/studio/dist/*.exe
          retention-days: 30

      - if: matrix.os == 'windows-latest'
        name: Upload Windows .zip
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip-${{ matrix.arch }}
          path: apps/studio/dist/*.zip
          retention-days: 30

      - if: matrix.os == 'windows-latest'
        name: Upload Windows .yml
        uses: actions/upload-artifact@v4
        with:
          name: windows-yml-${{ matrix.arch }}
          path: apps/studio/dist/*.yml
          retention-days: 30

      - if: matrix.os == 'windows-latest'
        name: Upload Windows Blockmap
        uses: actions/upload-artifact@v4
        with:
          name: windows-blockmap-${{ matrix.arch }}
          path: apps/studio/dist/*.blockmap
          retention-days: 30

      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            apps/studio/dist/*.exe
            apps/studio/dist/*.zip
            apps/studio/dist/*.dmg
            apps/studio/dist/*.AppImage
            apps/studio/dist/*.snap
            apps/studio/dist/*.deb
            apps/studio/dist/*.rpm
            apps/studio/dist/*.tar.gz
            apps/studio/dist/*.yml
            apps/studio/dist/*.blockmap
